/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import dao.CitaDao;
import dao.ClienteDao;
import dao.MascotaDao;
import dao.ServicioDao;
import dao.UsuarioDao;
import dao.VeterinarioDao;
import dao.impl.CitaDaoImpl;
import dao.impl.ClienteDaoImpl;
import dao.impl.MascotaDaoImpl;
import dao.impl.ServicioDaoImpl;
import dao.impl.UsuarioDaoImpl;
import dao.impl.VeterinarioDaoImpl;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerDateModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import modelo.Cita;
import modelo.Cliente;
import modelo.Mascota;
import modelo.Servicio;
import modelo.Veterinario;

/**
 *
 * @author Miguel Casa
 */
public class Citas extends javax.swing.JInternalFrame {
    
    Cita cita = new Cita();
    CitaDao citaDAO = new CitaDaoImpl();
    ClienteDao clienteDAO = new ClienteDaoImpl();
    MascotaDao mascotaDAO = new MascotaDaoImpl();
    UsuarioDao usuarioDAO = new UsuarioDaoImpl();
    VeterinarioDao veterinarioDAO = new VeterinarioDaoImpl();
    ServicioDao servicioDAO = new ServicioDaoImpl();
    DefaultTableModel modeloTable =  new DefaultTableModel();
    DefaultTableModel modeloTableR =  new DefaultTableModel();
    DefaultTableModel modeloTableC =  new DefaultTableModel();
    Map<Integer, Integer> deudaMap = new HashMap<>();
    Map<Integer, Integer> idcliMap = new HashMap<>();
    Map<Integer, Integer> idpetMap = new HashMap<>();
    Map<Integer, Integer> idvetMap = new HashMap<>();
    Set<String> horasSet = new HashSet<>();
    String fecha;
    String hora;
    String estado = "";
    int filaCita = 0;
    int idCita = 0;
    int idCli = 0;
    int idPet = 0;
    int idVet = 0;
    int deudaCli = 0;
    public int op;
    /**
     * Creates new form waos
     */
    public Citas() {
        initComponents();
        this.iniciarHora();
        this.listarCliente();
        this.listarCitas();
        this.cboVeterinario();
        this.cboServicio();
        this.costoServicio();
        this.buscarcliente();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaCita = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        txtbuscador = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtIdCita = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        btnSaldarPago = new javax.swing.JButton();
        btnCancelarCita = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        txtCliente = new javax.swing.JTextField();
        txtMascota = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cboServicio = new javax.swing.JComboBox<>();
        txtVeterinario = new javax.swing.JTextField();
        cboVet = new javax.swing.JComboBox<>();
        txtPrecio = new javax.swing.JTextField();
        txtFecha = new com.toedter.calendar.JDateChooser();
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        calendar.set(java.util.Calendar.HOUR_OF_DAY, 0);
        calendar.set(java.util.Calendar.MINUTE, 0);
        java.util.Date initialTime = calendar.getTime();
        txtHora = new javax.swing.JSpinner(new SpinnerDateModel(initialTime, null, null, java.util.Calendar.MINUTE));
        btnLimpiar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCli = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaPet = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        tablaCita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "CLIENTE", "MASCOTA", "VETERINARIO", "SERVICIO", "FECHA", "HORA", "ESTADO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCita.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCitaMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaCita);
        if (tablaCita.getColumnModel().getColumnCount() > 0) {
            tablaCita.getColumnModel().getColumn(0).setResizable(false);
            tablaCita.getColumnModel().getColumn(0).setPreferredWidth(5);
            tablaCita.getColumnModel().getColumn(1).setResizable(false);
            tablaCita.getColumnModel().getColumn(2).setResizable(false);
            tablaCita.getColumnModel().getColumn(3).setResizable(false);
            tablaCita.getColumnModel().getColumn(4).setResizable(false);
            tablaCita.getColumnModel().getColumn(4).setPreferredWidth(150);
            tablaCita.getColumnModel().getColumn(5).setResizable(false);
            tablaCita.getColumnModel().getColumn(5).setPreferredWidth(30);
            tablaCita.getColumnModel().getColumn(6).setResizable(false);
            tablaCita.getColumnModel().getColumn(6).setPreferredWidth(30);
            tablaCita.getColumnModel().getColumn(7).setResizable(false);
        }

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Buscador");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("ID Cita:");

        txtIdCita.setEditable(false);
        txtIdCita.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtIdCita.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIdCita.setEnabled(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(txtbuscador, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(txtIdCita, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(27, 27, 27))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(txtbuscador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13))
                    .addComponent(txtIdCita, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        btnSaldarPago.setText("SALDAR PAGO");
        btnSaldarPago.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSaldarPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaldarPagoActionPerformed(evt);
            }
        });

        btnCancelarCita.setText("CANCELAR CITA");
        btnCancelarCita.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarCitaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(275, 275, 275)
                .addComponent(btnSaldarPago, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(149, 149, 149)
                .addComponent(btnCancelarCita, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(288, 288, 288))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaldarPago, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("CITAS", jPanel1);

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("REGISTRO CITAS");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Cliente:");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Mascota:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("ID Veterinario:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Servicio:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Hora:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("Precio:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Fecha:");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, -1, -1));

        btnGuardar.setText("GUARDAR");
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel3.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, -1, -1));

        txtCliente.setEditable(false);
        jPanel3.add(txtCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 130, -1));

        txtMascota.setEditable(false);
        jPanel3.add(txtMascota, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 130, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Veterinario:");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        cboServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboServicioActionPerformed(evt);
            }
        });
        jPanel3.add(cboServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 230, 130, -1));

        txtVeterinario.setEditable(false);
        jPanel3.add(txtVeterinario, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 110, -1));

        cboVet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboVetActionPerformed(evt);
            }
        });
        jPanel3.add(cboVet, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 70, 110, -1));

        txtPrecio.setEditable(false);
        jPanel3.add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 270, 130, -1));
        jPanel3.add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 310, 130, -1));
        jPanel3.add(txtHora, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 350, 130, -1));

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        jPanel3.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 410, -1, -1));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        tablaCli.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "APELLIDO", "DNI"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCli.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCliMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCli);
        if (tablaCli.getColumnModel().getColumnCount() > 0) {
            tablaCli.getColumnModel().getColumn(0).setResizable(false);
            tablaCli.getColumnModel().getColumn(1).setResizable(false);
            tablaCli.getColumnModel().getColumn(2).setResizable(false);
            tablaCli.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Clientes:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Mascotas:");

        tablaPet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "EDAD", "TIPO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaPet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaPetMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaPet);
        if (tablaPet.getColumnModel().getColumnCount() > 0) {
            tablaPet.getColumnModel().getColumn(0).setResizable(false);
            tablaPet.getColumnModel().getColumn(1).setResizable(false);
            tablaPet.getColumnModel().getColumn(2).setResizable(false);
            tablaPet.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(21, 21, 21))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("REGISTAR", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private  void listarCitas(){
            List<Cita> listarCitas = citaDAO.listarCitas();
            modeloTableC = (DefaultTableModel)tablaCita.getModel();
            Object[] object = new Object[8];
            int i = 0;
            
            for(Cita cita :listarCitas){
                object[0]= cita.getId();
                object[1]= cita.getNombreCli();
                object[2]= cita.getNombrePet();
                object[3]= cita.getNombreVet();
                object[4]= cita.getTipoCita();
                object[5]= cita.getFechaCita();
                object[6]= cita.getHoraCita();
                object[7]= cita.getEstadoCita();
                modeloTableC.addRow(object);
                
                idcliMap.put(i, cita.getIdCli());
                idpetMap.put(i, cita.getIdPet());
                idvetMap.put(i, cita.getIdVet());
                i++;
            }
            tablaCita.setModel(modeloTableC);
            tablaCita.revalidate();
    }
    
    private  void listarCliente(){
            List<Cliente> listarCliente = clienteDAO.listarCliente();
            modeloTable = (DefaultTableModel)tablaCli.getModel();
            Object[] object = new Object[4];
            int i = 0;
            
            for(Cliente cli :listarCliente){
                object[0]= cli.getId();
                object[1]= cli.getNombre();
                object[2]= cli.getApellido();
                object[3]= cli.getDni();
                modeloTable.addRow(object);
                
                deudaMap.put(i, cli.getDeudas());
                i++;
            }
            tablaCli.setModel(modeloTable);
            tablaCli.revalidate();
    }
    
    private void listarMascotaRegistro(){
        if(this.idCli != 0){
            List<Mascota> listarMascotaR = mascotaDAO.listarMascotaRegistro(Integer.toString(this.idCli));
            modeloTableR = (DefaultTableModel)tablaPet.getModel();
            Object[] object = new Object[4];

            for(Mascota pet :listarMascotaR){
                object[0]= pet.getId();
                object[1]= pet.getNombre_pet();
                object[2]= pet.getEdad();
                object[3]= pet.getTipo();
                modeloTableR.addRow(object);
            }
            tablaPet.setModel(modeloTableR);
            tablaPet.revalidate();
        }
    }
    
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        if (!"".equals(txtVeterinario.getText())  && !"".equals(txtCliente.getText())  && !"". equals(txtMascota.getText())
                && txtFecha.getDate() != null){
            
            SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd");
            this.fecha = formatoFecha.format(txtFecha.getDate());
            SimpleDateFormat formatoHora = new SimpleDateFormat("HH:mm");
            this.hora = formatoHora.format(txtHora.getValue());
            
            cita.setIdCli(idCli);
            cita.setNombreCli(txtCliente.getText());
            cita.setIdPet(idPet);
            cita.setNombrePet(txtMascota.getText());
            cita.setIdVet(idVet);
            cita.setNombreVet(txtVeterinario.getText());
            cita.setTipoCita(cboServicio.getSelectedItem().toString());
            cita.setPrecioCita(Integer.parseInt(txtPrecio.getText()));
            cita.setFechaCita(fecha);
            cita.setHoraCita(hora + ":00");
            
            if(this.comprobarFechaActual()){
                if(this.verificarFecha()){
                    if( citaDAO.registrarCita(cita) && citaDAO.modificarDeudaCli(deudaCli + 1, idCli)){
                        this.limpiarCajas();
                        this.limpiarTablaCita();
                        this.limpiarTablaCli();
                        this.listarCliente();
                        this.listarCitas();
                        JOptionPane.showMessageDialog(this, "Se registro correctamente ", "OK",JOptionPane.INFORMATION_MESSAGE);

                    }else {
                        JOptionPane.showMessageDialog(this, "Error al reservar la cita", "ERROR",JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Ya hay una cita programada para ese dia en esa misma hora", "Horario Ocupado",JOptionPane.ERROR_MESSAGE);
                }
            }else {
                JOptionPane.showMessageDialog(this, "La fecha o hora ingresadas son anteriores a la fecha y hora actual", "Fecha pasada",JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Faltan datos a llenar", "Datos faltantes",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private boolean comprobarFechaActual(){
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                
        try {
            Date fechaHoraActual = new Date();
            Date fechaHoraIngresada = dateFormat.parse(fecha + " " + hora);
            
            Calendar calendarActual = Calendar.getInstance();
            calendarActual.setTime(fechaHoraActual);

            Calendar calendarIngresada = Calendar.getInstance();
            calendarIngresada.setTime(fechaHoraIngresada);
            
            if (calendarIngresada.before(calendarActual)) {
                return false;
            }
            
        }catch (ParseException ex) {
                    JOptionPane.showMessageDialog(null, "Formato de fecha o hora inválido. Utilice el formato yyyy-MM-dd HH:mm.");
        }
        return true;
    }
    
    private boolean verificarFecha(){
        int rowCount = tablaCita.getRowCount();
    
        for (int i = 0; i < rowCount; i++) {
            Object Vfecha = tablaCita.getValueAt(i, 5);
            Object Vhora = tablaCita.getValueAt(i, 6);
            horasSet.add(Vfecha + "-" + Vhora);
            
            if(horasSet.contains(fecha + "-" + hora+":00")){
                return false;
            }
        }
        return true;
    }
    
    public void verificarFechasVencidas(){
        int rowCount = tablaCita.getRowCount();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
    
        for (int i = 0; i < rowCount; i++) {
            try {
                Object id = tablaCita.getValueAt(i, 0);
                Object Vcliente = tablaCita.getValueAt(i, 1);
                Object Vfecha = tablaCita.getValueAt(i, 5);
                Object Vhora = tablaCita.getValueAt(i, 6);
                Object Vestado = tablaCita.getValueAt(i, 7);
                
                Date fechaHoraActual = new Date();
                Date fechaHoraIngresada = dateFormat.parse(Vfecha + " " + Vhora);

                Calendar calendarActual = Calendar.getInstance();
                calendarActual.setTime(fechaHoraActual);

                Calendar calendarIngresada = Calendar.getInstance();
                calendarIngresada.setTime(fechaHoraIngresada);

                SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                String fechaHoraIngresadaStr = outputFormat.format(calendarIngresada.getTime());
                
                if (calendarIngresada.before(calendarActual)) {
                    if("Pendiente".equals(Vestado) && this.op == 0){
                        JOptionPane.showMessageDialog(this, "La cita con ID: "+ id +" | Cliente: " + Vcliente + " | Fecha: "+fechaHoraIngresadaStr+ ", ha sobrepasado su hora y se requieren acciones", "Fecha vencida",JOptionPane.ERROR_MESSAGE);
                    }
                }

            }catch (ParseException ex) {
                    JOptionPane.showMessageDialog(null, "Formato de fecha o hora inválido. Utilice el formato yyyy-MM-dd HH:mm.");
            }
        }
    }
    
    public void verificarCitasProximas(){
        int rowCount = tablaCita.getRowCount();
    
        for (int i = 0; i < rowCount; i++) {
            Object id = tablaCita.getValueAt(i, 0);
            Object VCcliente = tablaCita.getValueAt(i, 1);
            Object VCfecha = tablaCita.getValueAt(i, 5);
            
            LocalDate fechaActual = LocalDate.now();
            LocalDate fechaIngresadaDate = LocalDate.parse((CharSequence) VCfecha, DateTimeFormatter.ISO_DATE);
            
            if (fechaIngresadaDate.isEqual(fechaActual)) {
                JOptionPane.showMessageDialog(this, "La cita con ID: "+ id +" | Cliente: " + VCcliente + " | Fecha: "+VCfecha+ ", Vencera hoy ", "Recordatorio",JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void tablaCliMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCliMouseClicked
        // TODO add your handling code here:
        int fila = tablaCli.rowAtPoint(evt.getPoint());
        String id = tablaCli.getValueAt(fila, 0).toString();
        String nombre = tablaCli.getValueAt(fila, 1).toString();
        
        this.idCli = Integer.parseInt(id);
        txtCliente.setText(nombre);
        this.idPet = 0;
        txtMascota.setText("");
        this.deudaCli = deudaMap.get(fila);
        this.limpiarTabla();
        this.listarMascotaRegistro();
    }//GEN-LAST:event_tablaCliMouseClicked

    private void tablaPetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaPetMouseClicked
        // TODO add your handling code here:
        int fila = tablaPet.rowAtPoint(evt.getPoint());
        String id = tablaPet.getValueAt(fila, 0).toString();
        String nombre = tablaPet.getValueAt(fila, 1).toString();
        
        this.idPet = Integer.parseInt(id);
        txtMascota.setText(nombre);
    }//GEN-LAST:event_tablaPetMouseClicked

    private void cboVetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboVetActionPerformed
        // TODO add your handling code here:
        this.seleccionarVet();
    }//GEN-LAST:event_cboVetActionPerformed

    private void cboServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboServicioActionPerformed
        // TODO add your handling code here:
        this.costoServicio();
    }//GEN-LAST:event_cboServicioActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        this.limpiarCajas();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnSaldarPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaldarPagoActionPerformed
        // TODO add your handling code here:
        if(!"".equals(this.estado) && this.idCli != 0){
            cita.setId(Integer.parseInt(tablaCita.getValueAt(filaCita, 0).toString()));
            cita.setIdCli(idcliMap.get(filaCita));
            cita.setNombreCli(tablaCita.getValueAt(filaCita, 1).toString());
            cita.setIdPet(idpetMap.get(filaCita));
            cita.setNombrePet(tablaCita.getValueAt(filaCita, 2).toString());
            cita.setIdVet(idvetMap.get(filaCita));
            cita.setNombreVet(tablaCita.getValueAt(filaCita, 3).toString());
            cita.setTipoCita(tablaCita.getValueAt(filaCita, 4).toString());
            cita.setFechaCita(tablaCita.getValueAt(filaCita, 5).toString());
            cita.setHoraCita(tablaCita.getValueAt(filaCita, 6).toString());
            cita.setEstadoCita("Pagado");
            
            if(citaDAO.insertarRegistroCitas(cita)&& citaDAO.modificarDeudaCli(deudaCli - 1, idCli) && citaDAO.eliminarCita(this.idCita)){
                this.limpiarTablaCita();
                this.limpiarTablaCli();
                this.listarCliente();
                this.listarCitas();
                this.limpiarCajas();

                JOptionPane.showMessageDialog(this, "Se pago correctamente ", "OK",JOptionPane.INFORMATION_MESSAGE);

            }else {
                JOptionPane.showMessageDialog(this, "Error al pagar la cita", "ERROR",JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No ha seleccionado ninguna cita", "Seleccione una cita",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaldarPagoActionPerformed

    private void btnCancelarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarCitaActionPerformed
        // TODO add your handling code here:
        if(this.idCli != 0){
            int option = JOptionPane.showConfirmDialog(null, "¿Estás seguro de que deseas cancelar la cita con ID: "+ this.idCita +" ?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (option ==  JOptionPane.YES_OPTION){
                cita.setId(Integer.parseInt(tablaCita.getValueAt(filaCita, 0).toString()));
                cita.setIdCli(idcliMap.get(filaCita));
                cita.setNombreCli(tablaCita.getValueAt(filaCita, 1).toString());
                cita.setIdPet(idpetMap.get(filaCita));
                cita.setNombrePet(tablaCita.getValueAt(filaCita, 2).toString());
                cita.setIdVet(idvetMap.get(filaCita));
                cita.setNombreVet(tablaCita.getValueAt(filaCita, 3).toString());
                cita.setTipoCita(tablaCita.getValueAt(filaCita, 4).toString());
                cita.setFechaCita(tablaCita.getValueAt(filaCita, 5).toString());
                cita.setHoraCita(tablaCita.getValueAt(filaCita, 6).toString());
                cita.setEstadoCita("Cancelado");
                
                if(citaDAO.insertarRegistroCitas(cita) && citaDAO.eliminarCita(this.idCita)){
                    if("Pendiente".equals(this.estado)){
                        citaDAO.modificarDeudaCli(deudaCli - 1, idCli);
                    }
                    this.limpiarTablaCita();
                    this.limpiarTablaCli();
                    this.listarCliente();
                    this.listarCitas();
                    this.limpiarCajas();
                    JOptionPane.showMessageDialog(this, "Se cancelo correctamente ", "OK",JOptionPane.INFORMATION_MESSAGE);

                }else {
                    JOptionPane.showMessageDialog(this, "Error al cancelar la cita", "ERROR",JOptionPane.ERROR_MESSAGE);
                }
            }else {
                this.limpiarCajas();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No ha seleccionado ninguna cita", "Seleccione una cita",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCancelarCitaActionPerformed

    private void tablaCitaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCitaMouseClicked
        // TODO add your handling code here:
        filaCita = tablaCita.rowAtPoint(evt.getPoint());
        String id = tablaCita.getValueAt(filaCita, 0).toString();
        this.estado = tablaCita.getValueAt(filaCita, 7).toString();
        
        this.idCli = idcliMap.get(filaCita);
        this.deudaCli = citaDAO.obtenerDeudasCli(idCli);
        this.idCita = Integer.parseInt(id);
        txtIdCita.setText(id);
    }//GEN-LAST:event_tablaCitaMouseClicked

    private void limpiarCajas(){
        txtVeterinario.setText("");
        txtCliente.setText("");
        txtMascota.setText("");
        txtIdCita.setText("");
        txtFecha.setDate(null);
        Calendar newCalendar = Calendar.getInstance();
        newCalendar.set(Calendar.HOUR_OF_DAY, 0);
        newCalendar.set(Calendar.MINUTE, 0);
        txtHora.setValue(newCalendar.getTime());
        deudaCli = 0;
        idCli = 0;
        idPet = 0;
        idVet = 0;
        idCita = 0;
        estado = "";
    }
    
    private  void cboVeterinario(){
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
            List<Veterinario> listarVeterinario = veterinarioDAO.listarVeterinario();
            Object[] object = new Object[2];
            
            for(Veterinario vet :listarVeterinario){
                object[0]= vet.getId();
                object[1]= vet.getNombre();
                comboBoxModel.addElement(object[0].toString());
            }
            cboVet.setModel(comboBoxModel);
    }
    
    private void seleccionarVet(){
        if(cboVet.getItemCount() != 0){
            String Veterinario = usuarioDAO.SeleccionarVet(cboVet.getSelectedItem().toString());
            this.idVet = Integer.parseInt(cboVet.getSelectedItem().toString());
            txtVeterinario.setText(Veterinario);
        }
    }
    
    private  void cboServicio(){
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
            List<Servicio> listarServicio = servicioDAO.listarServicios();
            Object[] object = new Object[2];
            
            for(Servicio ser :listarServicio){
                object[0]= ser.getTipo();
                object[1]= ser.getPrecio();
                comboBoxModel.addElement(object[0].toString());
            }
            cboServicio.setModel(comboBoxModel);
    }
    
    private void costoServicio(){
        if(cboServicio.getItemCount() != 0){
            String Costo = servicioDAO.costoServicio(cboServicio.getSelectedItem().toString());
            txtPrecio.setText(Costo);
        }
    }
    
    private void limpiarTabla(){
        modeloTableR = (DefaultTableModel) tablaPet.getModel();
        modeloTableR.setRowCount(0);
        tablaPet.revalidate();
    }
    
    private void limpiarTablaCli(){
        modeloTable = (DefaultTableModel) tablaCli.getModel();
        modeloTable.setRowCount(0);
        tablaCli.revalidate();
    }
    
    private void limpiarTablaCita(){
        modeloTableC = (DefaultTableModel) tablaCita.getModel();
        modeloTableC.setRowCount(0);
        tablaCita.revalidate();
    }
    
    private void iniciarHora() {
        javax.swing.JSpinner.DateEditor timeEditor = new javax.swing.JSpinner.DateEditor(txtHora, "HH:mm");
        txtHora.setEditor(timeEditor);
        
        javax.swing.JFormattedTextField textField = ((javax.swing.JSpinner.DefaultEditor) txtHora.getEditor()).getTextField();
        textField.setEditable(false);
    }
    
    public void iniciarbusqueda(){
        if (!"".equals(txtbuscador.getText())){
            this.limpiarTablaCita();
            List<Cita> listarCitas = citaDAO.buscarCita(txtbuscador.getText());
            modeloTableC = (DefaultTableModel)tablaCita.getModel();
            Object[] object = new Object[8];

            for(Cita cita :listarCitas){
                object[0]= cita.getId();
                object[1]= cita.getNombreCli();
                object[2]= cita.getNombrePet();
                object[3]= cita.getNombreVet();
                object[4]= cita.getTipoCita();
                object[5]= cita.getFechaCita();
                object[6]= cita.getHoraCita();
                object[7]= cita.getEstadoCita();
                modeloTableC.addRow(object);
            }
            tablaCita.setModel(modeloTableC);
            tablaCita.revalidate();
        } else{
            this.limpiarTabla();
            this.listarCitas();
        }
    }
    
    private void buscarcliente(){
        txtbuscador.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                iniciarbusqueda();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                iniciarbusqueda();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarCita;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnSaldarPago;
    private javax.swing.JComboBox<String> cboServicio;
    private javax.swing.JComboBox<String> cboVet;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tablaCita;
    private javax.swing.JTable tablaCli;
    private javax.swing.JTable tablaPet;
    private javax.swing.JTextField txtCliente;
    private com.toedter.calendar.JDateChooser txtFecha;
    private javax.swing.JSpinner txtHora;
    private javax.swing.JTextField txtIdCita;
    private javax.swing.JTextField txtMascota;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtVeterinario;
    private javax.swing.JTextField txtbuscador;
    // End of variables declaration//GEN-END:variables
}
