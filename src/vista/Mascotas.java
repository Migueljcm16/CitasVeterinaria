/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import dao.ClienteDao;
import dao.MascotaDao;
import dao.impl.ClienteDaoImpl;
import dao.impl.MascotaDaoImpl;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.table.DefaultTableModel;
import modelo.Cliente;
import modelo.Mascota;

/**
 *
 * @author Miguel Casa
 */
public class Mascotas extends javax.swing.JInternalFrame {
    
    int cbo = 0;
    
    JInternalFrame jMascotas;
    JInternalFrame registromascotaFrame;
    JDesktopPane desktop;
    RegistroMascotas rMascotas;
    ClienteDao clienteDAO = new ClienteDaoImpl();
    MascotaDao mascotaDAO = new MascotaDaoImpl();
    DefaultTableModel modeloTable =  new DefaultTableModel();
    DefaultTableModel modeloTableR =  new DefaultTableModel();
    /**
     * Creates new form Mascotas
     */
    public Mascotas() {
        initComponents();
        this.listarMascotaTabla();
        this.buscarMascota();
        this.cboCliente();
        this.listarMascotaRegistro();
        this.seleccionarCli();
        this.contarMascotas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablapet = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtbuscador = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        cbomascota = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableMascotaR = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtNmascota = new javax.swing.JTextField();
        btnregistrarMascota = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCli = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        tablapet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "EDAD", "TIPO", "ID DUEﾃ前", "DUEﾃ前"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablapet);
        if (tablapet.getColumnModel().getColumnCount() > 0) {
            tablapet.getColumnModel().getColumn(0).setResizable(false);
            tablapet.getColumnModel().getColumn(1).setResizable(false);
            tablapet.getColumnModel().getColumn(2).setResizable(false);
            tablapet.getColumnModel().getColumn(3).setResizable(false);
            tablapet.getColumnModel().getColumn(4).setResizable(false);
            tablapet.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Buscador");

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("TABLA MASCOTAS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(264, 264, 264))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtbuscador, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(25, 25, 25))))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtbuscador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        jTabbedPane1.addTab("TABLA", jPanel2);

        cbomascota.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cbomascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbomascotaActionPerformed(evt);
            }
        });

        tableMascotaR.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "DUEﾃ前", "NOMBRE", "EDAD", "TIPO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableMascotaR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMascotaRMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableMascotaR);
        if (tableMascotaR.getColumnModel().getColumnCount() > 0) {
            tableMascotaR.getColumnModel().getColumn(0).setResizable(false);
            tableMascotaR.getColumnModel().getColumn(1).setResizable(false);
            tableMascotaR.getColumnModel().getColumn(2).setResizable(false);
            tableMascotaR.getColumnModel().getColumn(3).setResizable(false);
            tableMascotaR.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel1.setText("Mascotas ");

        txtNmascota.setEnabled(false);

        btnregistrarMascota.setText("CRUD MASCOTA");
        btnregistrarMascota.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnregistrarMascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnregistrarMascotaActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 36)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("DUEﾃ前S ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(258, 258, 258)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addGap(267, 267, 267))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel5)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jLabel2.setText("ID");

        txtCli.setEnabled(false);

        jLabel6.setText("Cliente");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbomascota, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCli, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNmascota, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnregistrarMascota, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(28, 28, 28))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbomascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtNmascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnregistrarMascota)
                    .addComponent(jLabel2)
                    .addComponent(txtCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addGap(32, 32, 32))
        );

        jTabbedPane1.addTab("DUEﾃ前S", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbomascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbomascotaActionPerformed
        // TODO add your handling code here:
        this.limpiarTablaMascotaR();
        this.listarMascotaRegistro();
        this.seleccionarCli();
        this.contarMascotas();
    }//GEN-LAST:event_cbomascotaActionPerformed
    
    public void rMascotas(JDesktopPane desktop) {
    this.desktop = desktop;
    }
    
    private void btnregistrarMascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnregistrarMascotaActionPerformed
        // TODO add your handling code here:
        if(cbomascota.getItemCount() != 0){
            if (registromascotaFrame != null) {
                registromascotaFrame.dispose();
            }
            
            Mascotas mascotas = new Mascotas();
            this.rMascotas = new RegistroMascotas();
            registromascotaFrame = rMascotas;
            this.jMascotas = mascotas;
            jMascotas = desktop.getSelectedFrame();
            this.detectarForm();
            int desktopWidth = desktop.getWidth();
            int desktopHeight = getSize().height;
            int internalFrameWidth = 350; // Ancho deseado del JInternalFrame
            int internalFrameHeight = desktopHeight; // Altura deseada del JInternalFrame
            int internalFrameX = desktopWidth - internalFrameWidth; // Posiciﾃｳn X para que el JInternalFrame se alinee a la derecha
            int internalFrameY = 0; // Posiciﾃｳn Y, en este caso, lo dejamos en 0
            rMascotas.setBounds(internalFrameX, internalFrameY, internalFrameWidth, internalFrameHeight);
            rMascotas.txtidDueﾃｱo.setText(cbomascota.getSelectedItem().toString());
            rMascotas.txtdueﾃｱo.setText(txtCli.getText());
            rMascotas.rMascotas(desktop);
            rMascotas.JMascotas(jMascotas);
            rMascotas.JSMascotas(mascotas);
            desktop.add(rMascotas);
            rMascotas.setVisible(true);
        }
    }//GEN-LAST:event_btnregistrarMascotaActionPerformed

    private void tableMascotaRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMascotaRMouseClicked
        // TODO add your handling code here:
        int fila = tableMascotaR.rowAtPoint(evt.getPoint());
        String id = tableMascotaR.getValueAt(fila,0).toString();
        String nombre = tableMascotaR.getValueAt(fila, 2).toString();
        String edad = tableMascotaR.getValueAt(fila, 3).toString();
        String tipo = tableMascotaR.getValueAt(fila,4).toString();
        
        if(rMascotas != null){
            rMascotas.id = Integer.parseInt(id);
            rMascotas.txtidmascota.setText(id);
            rMascotas.txtidDueﾃｱo.setText(cbomascota.getSelectedItem().toString());
            rMascotas.txtdueﾃｱo.setText(txtCli.getText());
            rMascotas.txtmascota.setText(nombre);
            rMascotas.txtedad.setText(edad);
            rMascotas.cboTipo.setSelectedItem(tipo);
        }
        
    }//GEN-LAST:event_tableMascotaRMouseClicked
   
    public  void listarMascotaTabla(){
        
        List<Mascota> listarMascota = mascotaDAO.listarMascota();
        modeloTable = (DefaultTableModel)tablapet.getModel();
        Object[] object = new Object[6];

        for(Mascota pet :listarMascota){
            object[0]= pet.getId();
            object[1]= pet.getNombre_pet();
            object[2]= pet.getEdad();
            object[3]= pet.getTipo();
            object[4]= pet.getId_cli();
            object[5]= pet.getNombre_cli();

            modeloTable.addRow(object);
        }

        tablapet.setModel(modeloTable);
        tablapet.revalidate();
            
    }

    public void listarMascotaRegistro(){
        if(cbomascota.getItemCount() != 0){
            List<Mascota> listarMascotaR = mascotaDAO.listarMascotaRegistro(cbomascota.getSelectedItem().toString());
            modeloTableR = (DefaultTableModel)tableMascotaR.getModel();
            Object[] object = new Object[5];

            for(Mascota pet :listarMascotaR){
                object[0]= pet.getId();
                object[1]= pet.getNombre_cli();
                object[2]= pet.getNombre_pet();
                object[3]= pet.getEdad();
                object[4]= pet.getTipo();
                modeloTableR.addRow(object);
            }
            tableMascotaR.setModel(modeloTableR);
            tableMascotaR.revalidate();
        }
    }
    
    private  void cboCliente(){
            List<String> cbomascotas = new ArrayList<>();
            List<Cliente> listarCliente = clienteDAO.listarCliente();
            Object[] object = new Object[3];
            
            for(Cliente cli :listarCliente){
                object[0]= cli.getId();
                object[1]= cli.getNombre();
                object[2]= cli.getDni();
                cbomascotas.add(object[0].toString());
            }
            String[] values = obtenerValoresUnicos(cbomascotas);
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>(values);
            cbo = comboBoxModel.getSize();
            cbomascota.setModel(comboBoxModel);
    }
    
    public void actualizarCli(){
        for (int i = 0; i < cbo; i++) {
            int item = Integer.parseInt(cbomascota.getItemAt(i));
            int nMascota = mascotaDAO.contarMascota(cbomascota.getItemAt(i));
            mascotaDAO.modificarMascotasCli(nMascota, item);
        }
    }
    
    public void contarMascotas(){
        if(cbomascota.getItemCount() != 0){
            int nMascota = mascotaDAO.contarMascota(cbomascota.getSelectedItem().toString());
            txtNmascota.setText(Integer.toString(nMascota));
        }
    }
    
    public void seleccionarCli(){
        if(cbomascota.getItemCount() != 0){
            String Cliente = mascotaDAO.SeleccionarCli(cbomascota.getSelectedItem().toString());
            txtCli.setText(Cliente);
        }
    }
    
    public void limpiarTablaMascotas(){
            modeloTable = (DefaultTableModel) tablapet.getModel();
            modeloTable.setRowCount(0);
            tablapet.revalidate();
    }
    
    public void limpiarTablaMascotaR(){
            modeloTableR = (DefaultTableModel) tableMascotaR.getModel();
            modeloTableR.setRowCount(0);
            tableMascotaR.revalidate();
    }
    
    private void iniciarbusqueda(){
        if (!"".equals(txtbuscador.getText())){
            this.limpiarTablaMascotas();
            List<Mascota> listarMascota = mascotaDAO.buscarMascota(txtbuscador.getText());
            modeloTable = (DefaultTableModel)tablapet.getModel();
            Object[] object = new Object[6];

            for(Mascota pet :listarMascota){
                object[0]= pet.getId();
                object[1]= pet.getNombre_pet();
                object[2]= pet.getEdad();
                object[3]= pet.getTipo();
                object[4]= pet.getId_cli();
                object[5]= pet.getNombre_cli();

                modeloTable.addRow(object);
            }
            tablapet.setModel(modeloTable);
            tablapet.revalidate();
            
        } else{
            this.limpiarTablaMascotas();
            this.listarMascotaTabla();
        }
    }
    
    private void buscarMascota(){
        txtbuscador.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                iniciarbusqueda();
                System.out.println("Texto insertado: " + txtbuscador.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                iniciarbusqueda();
                System.out.println("Texto eliminado: " + txtbuscador.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });
    }
    
    private String[] obtenerValoresUnicos(List<String> cbomascotas) {
        
        List<String> datos = cbomascotas;

        // Convertir el conjunto a un arreglo de String
        String[] valoresArray = new String[datos.size()];
        datos.toArray(valoresArray);

        return valoresArray;
    }
    
    private void detectarForm(){
        jMascotas.addInternalFrameListener(new InternalFrameListener() {
            @Override
            public void internalFrameOpened(InternalFrameEvent e) {
                // No se utiliza en este ejemplo
            }

            @Override
            public void internalFrameClosing(InternalFrameEvent e) {
                // No se utiliza en este ejemplo
            }

            @Override
            public void internalFrameClosed(InternalFrameEvent e) {
                // Cerrar el internalFrame2 cuando internalFrame1 se cierre
                registromascotaFrame.dispose();
            }

            @Override
            public void internalFrameIconified(InternalFrameEvent e) {
                // No se utiliza en este ejemplo
            }

            @Override
            public void internalFrameDeiconified(InternalFrameEvent e) {
                // No se utiliza en este ejemplo
            }

            @Override
            public void internalFrameActivated(InternalFrameEvent e) {
                // No se utiliza en este ejemplo
            }

            @Override
            public void internalFrameDeactivated(InternalFrameEvent e) {
                // No se utiliza en este ejemplo
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnregistrarMascota;
    public javax.swing.JComboBox<String> cbomascota;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tablapet;
    private javax.swing.JTable tableMascotaR;
    private javax.swing.JTextField txtCli;
    private javax.swing.JTextField txtNmascota;
    private javax.swing.JTextField txtbuscador;
    // End of variables declaration//GEN-END:variables
}